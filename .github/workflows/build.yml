name: Building cpython-android
on:
  push:
    branches:
      - "*"
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: "x86-64"
            arch: "x86-64"
            os: ubuntu-22.04
          - name: "x86"
            arch: "x86"
            os: ubuntu-22.04
          - name: "armeabi-v7a"
            arch: "armv7a-eabi"
            os: ubuntu-22.04
          - name: "arm64-v8a"
            arch: "aarch64"
            os: ubuntu-22.04
    runs-on: ${{ matrix.os }}
    env:
      CPYTHON_ANDROID_BUILDIR: build-cpython-android
    defaults:
      run:
        shell: bash {0}

    steps:
      - name: setup and dependencies
        run: |
          sudo apt update
          #sudo apt -y upgrade
          sudo apt -y install build-essential 

          # we actually need bash
          sudo ln -sf /bin/bash /bin/sh

      - name: fix crlf
        run: git config --global core.autocrlf input

      - name: checkout
        uses: actions/checkout@v3

      - name: submodules
        run: |
          git submodule update --init --depth 1

          # this has to be changed with every submodule update. we could use a file or sth
          # expr $(git -C <repo> describe --tags --long | cut -d- -f2) + 1
          git -C cpython fetch --deepen 35
          git -C openssl fetch --deepen 19

      - name: depends version
        id: depends-version
        run: |
          # for maximum compatibility we use our python and ossl
          echo "pyver=$(git -C cpython describe --tags)" >> $GITHUB_OUTPUT
          echo "osslver=$(git -C openssl describe --tags)" >> $GITHUB_OUTPUT
        shell: bash

      - name: restore ${{ runner.os }} host python
        id: cache-host-python-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.CPYTHON_ANDROID_BUILDIR }}/host-python
          key: ${{ runner.os }}-python-${{ steps.depends-version.outputs.pyver }}

      - name: restore ${{ matrix.arch }} openssl
        id: cache-openssl-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.CPYTHON_ANDROID_BUILDIR }}/openssl-install
          key: ${{ matrix.arch }}-openssl-${{ steps.depends-version.outputs.osslver }}

      - name: copy build openssl
        if: steps.cache-openssl-restore.outputs.cache-hit == 'true'
        run: |
          mkdir -p ${{ env.CPYTHON_ANDROID_BUILDIR }}/output/opt/android-libs
          cp -r ${{ env.CPYTHON_ANDROID_BUILDIR }}/openssl-install/opt/android-libs/${{ matrix.arch }} ${{ env.CPYTHON_ANDROID_BUILDIR }}/output/opt/android-libs

      - name: find_2
        run: |
          find


      - name: build
        run: |
          mkdir -p ${{ env.CPYTHON_ANDROID_BUILDIR }}
          cd ${{ env.CPYTHON_ANDROID_BUILDIR }}
          ARCH=${{ matrix.arch }} CHOST=x86_64-pc-linux-gnu ANDROID_NDK_ROOT=/usr/local/lib/android/sdk/ndk/27.3.13750724 ../build.sh

      - name: ${{ matrix.name }} zip
        run: |
          cd ${{ env.CPYTHON_ANDROID_BUILDIR }}/output/opt/android-libs
          zip -r cpython_${{ matrix.name }}.zip ${{ matrix.arch }}

      - name: cpython ${{ matrix.name }}
        uses: actions/upload-artifact@v4
        with:
          name: cpython_${{ matrix.name }}
          path: ${{ env.CPYTHON_ANDROID_BUILDIR }}/output/opt/android-libs/cpython_${{ matrix.name }}.zip

      - name: find
        run: |
          find

      - name: save host python
      #we're using all linux x86_64 atm. not sure if there is problem in each matrix having it's own host python or some crazy race condition coz that would reqyure multiple copies of python for each (i.e wasteful)
        uses: actions/cache/save@v4
        if: matrix.name == 'x86-64'
        with:
          path: |
            ${{ env.CPYTHON_ANDROID_BUILDIR }}/host-python
          key: ${{ steps.cache-host-python-restore.outputs.cache-primary-key }}

      - name: save ${{ matrix.arch }} openssl
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ env.CPYTHON_ANDROID_BUILDIR }}/openssl-install
          key: ${{ steps.cache-openssl-restore.outputs.cache-primary-key }}

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: rel
      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            rel/**
